// SPDX-License-Identifier: MIT
pragma solidity ^0.8.24;

import {Script, console} from "forge-std/Script.sol";
import {TokenTycoonDecks} from "../../src/nft/TokenTycoonDecks.sol";

/**
 * @title InitializeDecks
 * @notice Initialize all preconstructed deck metadata onchain
 */
contract InitializeDecks is Script {
    
    function run() external {
        address decksContract = vm.envAddress("DECKS_CONTRACT");
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        
        console.log("Initializing decks at:", decksContract);
        
        TokenTycoonDecks decks = TokenTycoonDecks(decksContract);
        
        vm.startBroadcast(deployerPrivateKey);
        
        
        // Deck 1: Starter Deck
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e53746172746572204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a20202020202020202020202053696d706c652074657374206465636b0a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](4);
            
            composition[0] = TokenTycoonDecks.CardCount(48, 35);
            composition[1] = TokenTycoonDecks.CardCount(49, 15);
            composition[2] = TokenTycoonDecks.CardCount(50, 5);
            composition[3] = TokenTycoonDecks.CardCount(51, 5);
            
            decks.setDeckMetadata(
                1, // deckId
                "Starter Deck", // name
                "Simple test deck...", // description (truncated)
                "Simple test deck...", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(1);
            console.log("Initialized deck 1: Starter Deck");
        }
        // Deck 2: All DeFi
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e416c6c20446546693c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a202020202020202020202020412062616c616e636564206465636b20666f7220626567696e6e6572730a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](4);
            
            composition[0] = TokenTycoonDecks.CardCount(37, 35);
            composition[1] = TokenTycoonDecks.CardCount(36, 15);
            composition[2] = TokenTycoonDecks.CardCount(53, 5);
            composition[3] = TokenTycoonDecks.CardCount(47, 5);
            
            decks.setDeckMetadata(
                2, // deckId
                "All DeFi", // name
                "A balanced deck for beginners...", // description (truncated)
                "A balanced deck for beginners...", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(2);
            console.log("Initialized deck 2: All DeFi");
        }
        // Deck 3: Control & Disruption
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e436f6e74726f6c20262044697372757074696f6e3c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a2020202020202020202020204120646566656e7369766520737472617465677920666f6375736564206f6e20737461626c65204554482067656e65726174696f6e2c2070726f7465637465642073746f726167652c20616e642064697372757074696e67206f70706f6e656e7473207768696c65206275696c64696e67206361726420616476616e746167652e0a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](13);
            
            composition[0] = TokenTycoonDecks.CardCount(38, 24);
            composition[1] = TokenTycoonDecks.CardCount(37, 4);
            composition[2] = TokenTycoonDecks.CardCount(87, 4);
            composition[3] = TokenTycoonDecks.CardCount(88, 3);
            composition[4] = TokenTycoonDecks.CardCount(1, 3);
            composition[5] = TokenTycoonDecks.CardCount(49, 4);
            composition[6] = TokenTycoonDecks.CardCount(33, 3);
            composition[7] = TokenTycoonDecks.CardCount(13, 4);
            composition[8] = TokenTycoonDecks.CardCount(44, 3);
            composition[9] = TokenTycoonDecks.CardCount(51, 2);
            composition[10] = TokenTycoonDecks.CardCount(20, 2);
            composition[11] = TokenTycoonDecks.CardCount(52, 2);
            composition[12] = TokenTycoonDecks.CardCount(28, 2);
            
            decks.setDeckMetadata(
                3, // deckId
                "Control & Disruption", // name
                "A defensive strategy focused on stable ETH generation, protected storage, and disrupting opponents w...", // description (truncated)
                "A defensive strategy focused on stable ETH generation, protected storage, and disrupting opponents while building card advantage....", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(3);
            console.log("Initialized deck 3: Control & Disruption");
        }
        // Deck 4: Aggressive DeFi
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e4167677265737369766520446546693c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a2020202020202020202020204120666173742d706163656420737472617465677920666f6375736564206f6e206578706c6f73697665204554482067656e65726174696f6e207468726f75676820686967682d7969656c6420446546692070726f746f636f6c7320616e64207269736b792062757420726577617264696e6720706c6179732e0a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](12);
            
            composition[0] = TokenTycoonDecks.CardCount(6, 24);
            composition[1] = TokenTycoonDecks.CardCount(32, 4);
            composition[2] = TokenTycoonDecks.CardCount(10, 4);
            composition[3] = TokenTycoonDecks.CardCount(12, 4);
            composition[4] = TokenTycoonDecks.CardCount(48, 4);
            composition[5] = TokenTycoonDecks.CardCount(11, 2);
            composition[6] = TokenTycoonDecks.CardCount(46, 4);
            composition[7] = TokenTycoonDecks.CardCount(50, 2);
            composition[8] = TokenTycoonDecks.CardCount(14, 3);
            composition[9] = TokenTycoonDecks.CardCount(59, 3);
            composition[10] = TokenTycoonDecks.CardCount(56, 3);
            composition[11] = TokenTycoonDecks.CardCount(8, 3);
            
            decks.setDeckMetadata(
                4, // deckId
                "Aggressive DeFi", // name
                "A fast-paced strategy focused on explosive ETH generation through high-yield DeFi protocols and risk...", // description (truncated)
                "A fast-paced strategy focused on explosive ETH generation through high-yield DeFi protocols and risky but rewarding plays....", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(4);
            console.log("Initialized deck 4: Aggressive DeFi");
        }
        // Deck 5: Time Bomb Casino
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e54696d6520426f6d6220436173696e6f3c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a2020202020202020202020204120686967682d7269736b2c20686967682d726577617264207374726174656779206261736564206f6e2064656c6179656420656666656374732c2074656d706f72617279206761696e732c20616e64206578706c6f736976652074696d696e672e20506c61792077697468206669726520616e642070726f6669742066726f6d206368616f732e0a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](12);
            
            composition[0] = TokenTycoonDecks.CardCount(76, 24);
            composition[1] = TokenTycoonDecks.CardCount(81, 4);
            composition[2] = TokenTycoonDecks.CardCount(59, 4);
            composition[3] = TokenTycoonDecks.CardCount(14, 4);
            composition[4] = TokenTycoonDecks.CardCount(89, 4);
            composition[5] = TokenTycoonDecks.CardCount(8, 4);
            composition[6] = TokenTycoonDecks.CardCount(66, 3);
            composition[7] = TokenTycoonDecks.CardCount(72, 3);
            composition[8] = TokenTycoonDecks.CardCount(64, 3);
            composition[9] = TokenTycoonDecks.CardCount(78, 3);
            composition[10] = TokenTycoonDecks.CardCount(84, 2);
            composition[11] = TokenTycoonDecks.CardCount(65, 2);
            
            decks.setDeckMetadata(
                5, // deckId
                "Time Bomb Casino", // name
                "A high-risk, high-reward strategy based on delayed effects, temporary gains, and explosive timing. P...", // description (truncated)
                "A high-risk, high-reward strategy based on delayed effects, temporary gains, and explosive timing. Play with fire and profit from chaos....", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(5);
            console.log("Initialized deck 5: Time Bomb Casino");
        }
        // Deck 6: Reactive Parasite
        {
            bytes memory svgData = hex"3c7376672077696474683d2233303022206865696768743d223432302220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667223e0a202020203c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d2223316131613265222f3e0a202020203c7265637420783d2231302220793d223130222077696474683d2232383022206865696768743d22343030222072783d223135222066696c6c3d222331363231336522207374726f6b653d222330663334363022207374726f6b652d77696474683d2232222f3e0a202020203c7465787420783d223135302220793d2235302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231382220666f6e742d7765696768743d22626f6c64223e52656163746976652050617261736974653c2f746578743e0a202020203c7465787420783d223135302220793d2238302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223132223e546f6b656e205479636f6f6e204465636b3c2f746578743e0a202020203c7265637420783d2233302220793d22313030222077696474683d2232343022206865696768743d22313630222072783d223130222066696c6c3d222330663334363022207374726f6b653d222365393435363022207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223133302220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e53747261746567793a3c2f746578743e0a202020203c666f726569676e4f626a65637420783d2234302220793d22313430222077696474683d2232323022206865696768743d22313130223e0a20202020202020203c64697620786d6c6e733d22687474703a2f2f7777772e77332e6f72672f313939392f7868746d6c22207374796c653d22666f6e742d66616d696c793a20417269616c2c2073616e732d73657269663b20666f6e742d73697a653a203970783b20636f6c6f723a20236666666666663b20746578742d616c69676e3a2063656e7465723b2070616464696e673a203570783b223e0a202020202020202020202020412063756e6e696e672073747261746567792074686174206665656473206f6666206f70706f6e656e7420616374696f6e73207468726f7567682074726967676572732c20737465616c732c20616e6420726561637469766520656666656374732e2050726f6669742066726f6d206576657279206d6f766520796f7572206f70706f6e656e74206d616b65732e0a20202020202020203c2f6469763e0a202020203c2f666f726569676e4f626a6563743e0a202020203c7265637420783d2233302220793d22323830222077696474683d2232343022206865696768743d223830222072783d223130222066696c6c3d222331363231336522207374726f6b653d222366333963313222207374726f6b652d77696474683d2231222f3e0a202020203c7465787420783d223135302220793d223330352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236633396331322220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2231342220666f6e742d7765696768743d22626f6c64223e36302043415244533c2f746578743e0a202020203c7465787420783d223135302220793d223332352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236666666666662220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d223130223e526561647920746f20506c61793c2f746578743e0a202020203c7465787420783d223135302220793d223334352220746578742d616e63686f723d226d6964646c65222066696c6c3d22236539343536302220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e5365616c6564204465636b3c2f746578743e0a202020203c7465787420783d223135302220793d223430302220746578742d616e63686f723d226d6964646c65222066696c6c3d22233636362220666f6e742d66616d696c793d22417269616c2c2073616e732d73657269662220666f6e742d73697a653d2238223e746f6b656e7479636f6f6e2e696f3c2f746578743e0a3c2f7376673e";
            
            TokenTycoonDecks.CardCount[] memory composition = new TokenTycoonDecks.CardCount[](12);
            
            composition[0] = TokenTycoonDecks.CardCount(80, 24);
            composition[1] = TokenTycoonDecks.CardCount(61, 4);
            composition[2] = TokenTycoonDecks.CardCount(60, 4);
            composition[3] = TokenTycoonDecks.CardCount(75, 4);
            composition[4] = TokenTycoonDecks.CardCount(15, 4);
            composition[5] = TokenTycoonDecks.CardCount(74, 3);
            composition[6] = TokenTycoonDecks.CardCount(9, 3);
            composition[7] = TokenTycoonDecks.CardCount(22, 2);
            composition[8] = TokenTycoonDecks.CardCount(68, 3);
            composition[9] = TokenTycoonDecks.CardCount(86, 4);
            composition[10] = TokenTycoonDecks.CardCount(79, 3);
            composition[11] = TokenTycoonDecks.CardCount(71, 2);
            
            decks.setDeckMetadata(
                6, // deckId
                "Reactive Parasite", // name
                "A cunning strategy that feeds off opponent actions through triggers, steals, and reactive effects. P...", // description (truncated)
                "A cunning strategy that feeds off opponent actions through triggers, steals, and reactive effects. Profit from every move your opponent makes....", // strategy (truncated)
                composition, // composition
                svgData, // svgData
                0, // maxSupply
                true // isPreconstructed
            );
            
            decks.finalizeDeck(6);
            console.log("Initialized deck 6: Reactive Parasite");
        }
        
        vm.stopBroadcast();
        
        console.log("All 6 decks initialized successfully!");
    }
}